<?xml version="1.0" encoding="UTF-8" ?>
<!--
<!DOCTYPE beans PUBLIC 
	"-//SPRING//DTD BEAN//EN" 
	"http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
    <!-- Copied and adpated (to use context parameters to select JNDI resources) from AMS2 version 1.5 -->

	<!-- ** core services *************************************************** -->
	
    <!-- Load properties from context.xml via servlet container -->
    <bean
        class="org.springframework.web.context.support.ServletContextPropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="false" />
    </bean>
    
    <bean id="abstractAuthSrv" class="nl.mpi.lat.ams.service.impl.AbstractAuthorizationSrv" 
              abstract="true" >
        <property name="nodeAuthDao" 			ref="nodeAuthDao" />
        <property name="nodeAuthStaledDao" 		ref="nodeAuthStaledDao" />
        <property name="nodeLicenseStaledDao" 	ref="nodeLicenseStaledDao" />
        <property name="fabricSrv"				ref="fabricSrv" />
        <property name="licenseSrv"				ref="licenseSrv" />
        <property name="ruleSrv"					ref="ruleSrv" />
        <property name="principalSrv"   ref="principalSrv" />
    </bean>
	
	<!-- bean id="ruleEvalSrv" class="nl.mpi.lat.ams.eval.RuleEvaluationSrv"  
		parent="abstractAuthSrv" / -->
		
	<!-- new ruleEvalService with cache
		BEWARE: the CACHED rule eval service MUST NOT BE a SINGLETON, 
		cause due to it bears cache data it is NOT a threatsafe singleton service instance -->
    <bean id="cachedRuleEvalSrv" class="nl.mpi.lat.ams.eval.CachedRuleEvalSrv"
              parent="abstractAuthSrv"
              scope="prototype" >
		<!-- aop:scoped-proxy / -->
        <property name="principalSrv"	ref="principalSrv" />
    </bean>
    <bean id="corpusDbAuthSrv" class="nl.mpi.lat.ams.service.impl.CsDbAuthSrv" >
        <property name="fabricSrv"		ref="fabricSrv" />
        <property name="principalSrv"	ref="principalSrv" />
    </bean>
	
    <bean id="authorizationSrv"		class="nl.mpi.lat.ams.service.impl.AmsAuthorizationSrv" 
              parent="abstractAuthSrv" >
        <property name="ruleEvaluationSrv"	ref="corpusDbAuthSrv" />
        <property name="nodePcplRuleDao"                ref="nodePcplRuleDao" />
    </bean>
	
    <bean id="licenseSrv" class="nl.mpi.lat.ams.service.impl.LicenseSrv" >
        <property name="licenseDao"		ref="licenseDao" />
        <property name="nodeLicenseDao"	ref="nodeLicenseDao" />
        <property name="nodePcplLicenseDao"     ref="nodePcplLicenseDao" />
        <property name="licenseRootDir">
            <bean class="org.springframework.jndi.JndiObjectFactoryBean">
                <property name="jndiName" value="java:comp/env/ams2/license/licenseRootDir" />
            </bean>
        </property>
    </bean>
	
    <bean id="ruleSrv" class="nl.mpi.lat.ams.service.impl.RuleSrv" >
        <property name="ruleDao"			ref="ruleDao" />
    </bean>
	
    <bean id="fabricSrv" class="nl.mpi.latimpl.fabric.FabricSrv" >
        <property name="structDB"		ref="corpusStructureDB" />
        <property name="archObjDB"		ref="corpusStructureDB" />
        <property name="versionDB"		ref="versioningDB" />
    </bean>
	
    <bean id="corpusStructureDB" class="nl.mpi.corpusstructure.CorpusStructureDBWriteImpl" >
		<!-- db url / datasource -->
        <constructor-arg	 value="${nl.mpi.metadatabrowser.adapter.CSDBConnectionResource}" />
        <constructor-arg	 value="false" />	<!-- bootstrap mode -->
        <constructor-arg	 value="" />			<!-- db user : jndi configured -->
        <constructor-arg	 value="" />			<!-- db passwd : jndi configured -->
    </bean>
	<!-- csdb New-None-Singleton-Instance -->
<!--    <bean id="corpusStructureDB-NNSI" class="nl.mpi.corpusstructure.CorpusStructureDBWriteImpl" 
              parent="corpusStructureDB"
              scope="prototype" />-->
		
    <bean id="versioningDB" class="nl.mpi.versioning.manager.VersioningAPIImpl" >
        <constructor-arg	value="${nl.mpi.metadatabrowser.adapter.CSDBConnectionResource}" />
        <constructor-arg	value="" />			<!-- db user : jndi configured -->
        <constructor-arg	value="" />			<!-- db passwd : jndi configured -->
    </bean>
    
        <!-- versioningDB New-None-Singleton-Instance -->
    <bean id="versioningDB-NNSI" class="nl.mpi.versioning.manager.VersioningAPIImpl" 
              parent="versioningDB"
          scope="prototype" />
	
	<!-- ** DAOs ************************************************************ -->
    <bean id="nodeAuthDao"
              class="nl.mpi.lat.ams.dao.NodeAuthorizationDao" >
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
    <bean id="nodeAuthStaledDao"
              class="nl.mpi.lat.ams.dao.NodeAuthorizationStaledDao" >
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
    <bean id="nodeLicenseStaledDao"
              class="nl.mpi.lat.ams.dao.NodeLicenseStaledDao" >
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
    <bean id="ruleDao"
              class="nl.mpi.lat.ams.dao.RuleDao" >
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
        
    <bean id="nodePcplRuleDao"
              class="nl.mpi.lat.ams.dao.NodePcplRuleDao" >
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
            
    </bean>
        
    <bean id="licenseDao"
              class="nl.mpi.lat.ams.dao.LicenseDao" >
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
    <bean id="nodeLicenseDao"
              class="nl.mpi.lat.ams.dao.NodeLicenseDao" >
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>
        
    <bean id="nodePcplLicenseDao"
              class="nl.mpi.lat.ams.dao.NodePcplLicenseDao" >
        <property name="sessionFactory" >
            <ref bean="sessionFactory"/>
        </property>
    </bean>


</beans>
