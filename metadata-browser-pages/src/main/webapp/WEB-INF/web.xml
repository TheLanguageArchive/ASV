<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

    <display-name>metadata-browser-pages</display-name>

    <!--
	    There are three means to configure Wickets configuration mode and they
	    are tested in the order given.

	    1) A system property: -Dwicket.configuration
	    2) servlet specific <init-param>
	    3) context specific <context-param>

    The value might be either "development" (reloading when templates change) or
    "deployment". If no configuration is found, "development" is the default. -->
    <!-- Shibboleth filter definitions  -->
    <!-- Enable for shibboleth -->
        <filter>
            <filter-name>InterceptorFilter</filter-name>
        <filter-class>nl.mpi.metadatabrowser.filter.RequestInterceptorFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>InterceptorFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>AAIFilter</filter-name>
        <filter-class>de.mpg.aai.shhaa.AuthFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>AAIFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <listener>
        <listener-class>de.mpg.aai.shhaa.config.ConfigContextListener</listener-class>
    </listener>
<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:config/**/*.xml, classpath:spring-config/core.xml,classpath:spring-config/persistence.xml,classpath:spring-config/datasource-jndi.xml</param-value>
    </context-param>
<!--        <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:config/**/*.xml</param-value>
    </context-param>-->
        <context-param> <!-- used when shibboleth is enabled ignored otherwise -->
        <param-name>ShhaaConfigLocation</param-name>
        <param-value>/WEB-INF/shhaa.xml</param-value>
    </context-param>
    <context-param>
		<param-name>configuration</param-name>
		<param-value>deployment</param-value>
	</context-param>

    <filter>
        <filter-name>wicket.metadata-browser-pages</filter-name>
        <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
        <init-param>
            <param-name>applicationFactoryClassName</param-name>
            <param-value>org.apache.wicket.spring.SpringWebApplicationFactory</param-value>
        </init-param>
    </filter>
    <filter>
        <filter-name>springHibernateFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springHibernateFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
   <filter-mapping>
        <filter-name>wicket.metadata-browser-pages</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
<!--    <security-constraint>
        <display-name>
            prevents direct access to raw jsp pages.
        </display-name>
        <web-resource-collection>
            <web-resource-name>raw-jsp-jsf-pages</web-resource-name>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>tomcat</role-name>
        </auth-constraint>
    </security-constraint>

    <login-config>
        <auth-method>BASIC</auth-method>
    </login-config>
    <security-role>
        <description> The role that is required to log in to the Application
        </description>
        <role-name>tomcat</role-name>
    </security-role> -->
    <resource-ref>
        <description>CS Datasource</description>
        <res-ref-name>jdbc/CSDB</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>
    <resource-ref>
        <description>versioning Datasource</description>
        <res-ref-name>jdbc/VERSDB</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>
</web-app>
