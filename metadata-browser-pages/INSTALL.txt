*** METADATA Browser INSTALLATION ***

==========================================================================================
NOTES
==========================================================================================

Note on using SSL: MetadataBrowser fully supports secure https browsing and connections

==========================================================================================
BUILDING FROM SOURCE FOR RELEASE
==========================================================================================

The METADATA Browser source code contains 5 parts: the main war, the cmdi api, the cmdi-implementation,and two differents profile : using csdb adapter or using the coming csdb2.  It can be built using maven.

To create all the artifacts for METADATA Browser
(api, war file, cmdi-impl and both csdb profile):

  mvn package -DdeployTo=<name of the server where it will be deployed to>

In order to, besides creating the artifacts,
also install them into the local repository:

  mvn install -DdeployTo=<name of the server where it will be deployed to>

The "deployTo" property should contain the name of the server where the war
file is supposed to be deployed.  The shibboleth configuration file
(shhaa.xml) will be filtered accordingly (using a filter file with the
corresponding name: "filter.<server>.properties", under the directory
"./src/main/resources").  If a filter with the intended name doesn't exist, it
must be created and the necessary properties added (based on the existing
filters).

To create eclipse configuration files:

  mvn eclipse:eclipse

Then in Eclipse from the package explorer select Import -> existing project
into workspace.

==========================================================================================
COMPILED PACKAGE
==========================================================================================

The war file should be unpacked into the folder where the current version is
usually located (i.e.  in lux17, it would be "/lat/webapps/metadata_browser").

First, unpack the tgz containing the war into

/lat/webapps/metadata_browser/VERSION-SPECIFIC-STRING/

then, unpack the war in there to a new directory, say

/lat/webapps/metadata_browser/VERSION-SPECIFIC-STRING/war/metadatabrowser/

and finally, make

/lat/webapps/metadata_browser/current/ a symlink to that latter directory,
so the tomcat/conf/Catalina/localhost/*.xml can point to, in the example
/lat/webapps/metadata_browser/current/ as location of the webapp.

If the code was compiled for the server in question, no files need to be
changed.  If not, the configuration files (e.g.  shhaa.xml) should be
adapted.

The files extracted from the war file need to be readable for the UID in
which the tomcat is running. No files need to be written by the Tomcat.

==========================================================================================
	AAI (Shibboleth vs Lana2)
==========================================================================================
	
Out of the box, the Metadata Browser is configured to be used with Shibboleth
authentication. It is possible to configure the browser for use with Lana2. To do this,
comment out the sections of WEB-INF/web.xml indicated to be related to Shibboleth and
uncomment the sections that enable Lana2.

For some notes on installation on systems configured for Lana2, see the section towards
the end of this document

==========================================================================================
CONFIGURATION
==========================================================================================

The METADATA Browser uses the following configuration options:

* nl.mpi.metadatabrowser.manualUrl
(a website about usage of the metadata browser: This is no webapp and this
URL is not affected by forceHttpOrHttps nor forceHttpsPrefix settings!)

* nl.mpi.annexUrl
(location of Annex webapp, gets ?jsessionid=...&handle=... suffix or, if no
handle/pid/urid known, ?jsessionid=...&nodeid=... suffix from the browser)

* nl.mpi.trovaUrl
(location of Trova webapp, can be referenced as $trova_url$ in config file
popup-menu-items.xml Browser uses nodeid= but Trova also supports handle=)

* nl.mpi.rrsIndex
(location of "request access" page within RRS, see below)

* nl.mpi.rrsRegister
(location of "register as new user" page within RRS...)

* nl.mpi.amsUrl
(location of the Access Management System webapp, referenced as $AmsURL$)

* nl.mpi.amsRecalculateUrl
(URL to contact after running the ArchiveCrawler to let AMS know that
the access rights for the affected corpus have to be recalculated)

* nl.mpi.imexUrl
(location of the Imex image viewer webapp, can be referenced as $ImexURL$)

* nl.mpi.imdiSearchUrl
(location of the IMDI Metadata Search webapp, referenced as $IMDISearchURL$)

* nl.mpi.rrsUrl
(location of Resource Request System webapp, used together with nl.mpi.rrs*
and can be referenced as $RRSURL$ when used in popup-menu-items.xml)

* nl.mpi.translationservicebase
Base url for the translation service up to "/translate?...", 
e.g. "https://lux16.mpi.nl/ds/TranslationService"

* nl.mpi.metadatabrowser.schemeReplacePattern
URLs matching this regex will have their scheme rewritten

* nl.mpi.metadatabrowser.schemeReplaceTargetScheme
Protocol enforcement on matching URLs, e.g. http or https, will be applied to
external URLs matching the pattern defined in the schemeReplacePattern parameter

* nl.mpi.metadatabrowser.adapter.handleResolutionCacheExpiry
amount of time in seconds for which handle - URL resolutions should be cached

* nl.mpi.metadatabrowser.annexMimeTypes
OPTIONAL whitespace separated list of mime types that should open Annex when the 
'view' action is executed. Defaults to:
    "text/plain text/x-eaf+xml text/x-chat text/x-shoebox-text 
    text/x-toolbox-text text/x-subrip text/praat-textgrid"

* nl.mpi.metadatabrowser.wicket.maxSizePerSession 
OPTIONAL representation of the size for page store file (cache on disk per
session), e.g. '10M' or '1024K'

* nl.mpi.metadatabrowser.wicket.inmemoryCacheSize
OPTIONAL integer parameter defining the maximum number of page instances 
that will be saved into application-scoped cache (0 is disabled, also the
default)

Connection parameters for the 'adapter' profile (i.e. hybrid archive):

* nl.mpi.metadatabrowser.adapter.CSDBConnectionResource
Name of the JNDI resource to use to connect to the corpus structure database (in case
of the 'adapter' profile)

* nl.mpi.metadatabrowser.adapter.AMS2ConnectionResource
Name of the JNDI resource to use to connect to the AMS2 database 

* nl.mpi.metadatabrowser.adapter.DAMLRResource
Name of the JNDI resource to use to connect to DAMLR 

* nl.mpi.metadatabrowser.adapter.ADSResource
Name of the JNDI resource to use to connect to Active Directory 

The metadata browser accepts the following URL GET parameters:

- rootnode
- openpath
- openhandle

Handles are supported in the form of handle URIs such as 
	'hdl:1234/abc-def'

Node IDs are supported in the form of node ID URIs such as 
	'node:5678'

In order to be backwards compatible and support cases such as
	'openpath=MPI84114%23'
define a rewrite rule (for the first two of these parameters) that rewrites this to
a node URI, e.g. in this case
	'openpath=node:84114'
	
==========================================================================================
INSTALLATION NOTES FOR LANA2 ENVIRONMENTS
==========================================================================================

Here are some notes collected by Eric Auer while deploying metadata browser 1.1.2-RC1 at
SOAS in London (IMDI metadata only)

----
``The web.xml in the download fails to specify the auth style (with or without LDAP), so I 
manually added this:
<init-param>
<param-name>authenticationService</param-name>
<param-value>amsAuthenticationSrv</param-value>
</init-param>
... to the nl.mpi.lat.auth.lana2.LanaAuthFilter filter setup.``
----
``To use AMS *with* LDAP/KDC, you would instead of "ams" put
"integrated" in the above snippet. If you put "integrated",
but have no LDAP/KDC, logins may take minutes until AMS has
the timeout and realizes that you do not have LDAP/KDC 

	* the ams2-1.5.0.jar (and ams2.api-1.5.0.jar & ams2.auth-1.5.0.jar?) shipping with the
	 metadata browser seems to require CMDI, and it might lack mechanisms to switch 
	 LDAP/KDC off, in any case I found the following strings in the jar file:
		java:comp/env/jdbc/AMS2-CMDI-DB
		java:comp/env/kdc/MPI-NL
		java:comp/env/jdbc/CSDB3
		java:comp/env/AmsURL
		java:comp/env/ldap/DAMLR
		
... and indeed, metadata-browser fails to start, giving some
error message about not finding AMS2-CMDI-DB then Also,
it hardcodes several CMDI specific file locations. I would
have hoped those to be configurable without editing the JAR
and I would have preferred non-absolute paths in particular
for /lat/webapps/ams2-cmdi/current/... 
		
[How] I got the metadata-browser to work nevertheless:
- remove all three ams*1.5.0*jar files from WEB-INF/lib/
- copy ams2-1.4.9.2.jar from another webapp installed at SOAS
- note that this package still ships with "devel mode wicket"``

