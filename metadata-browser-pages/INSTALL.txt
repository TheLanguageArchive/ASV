*** METADATA Browser INSTALLATION ***

==========================================================================================
NOTES
==========================================================================================

Note on using SSL: MetadataBrowser fully supports secure https browsing and connections

==========================================================================================
BUILDING FROM SOURCE FOR RELEASE
==========================================================================================

The METADATA Browser source code contains 3 parts: the main war, the services api, and the 'hybrid' implementation.  It can be built using maven.

To create all the artifacts for METADATA Browser
(api, war file, cmdi-impl and both csdb profile):

  mvn package -DdeployTo=<name of the server where it will be deployed to>

In order to, besides creating the artifacts,
also install them into the local repository:

  mvn install -DdeployTo=<name of the server where it will be deployed to>

The "deployTo" property should contain the name of the server where the war
file is supposed to be deployed.  The shibboleth configuration file
(shhaa.xml) will be filtered accordingly (using a filter file with the
corresponding name: "filter.<server>.properties", under the directory
"./src/main/resources").  If a filter with the intended name doesn't exist, it
must be created and the necessary properties added (based on the existing
filters).

To build for *LANA2* environments, add the following parameter to the maven 
commands:

	-Pnon-shib

To create eclipse configuration files:

  mvn eclipse:eclipse

Then in Eclipse from the package explorer select Import -> existing project
into workspace.

==========================================================================================
COMPILED PACKAGE
==========================================================================================

The war file should be unpacked into the folder where the current version is
usually located (i.e.  in lux17, it would be "/lat/webapps/metadata_browser").

First, unpack the tgz containing the war into

/lat/webapps/metadata_browser/VERSION-SPECIFIC-STRING/

then, unpack the war in there to a new directory, say

/lat/webapps/metadata_browser/VERSION-SPECIFIC-STRING/war/metadatabrowser/

and finally, make

/lat/webapps/metadata_browser/current/ a symlink to that latter directory,
so the tomcat/conf/Catalina/localhost/*.xml can point to, in the example
/lat/webapps/metadata_browser/current/ as location of the webapp.

If the code was compiled for the server in question, no files need to be
changed.  If not, the configuration files (e.g.  shhaa.xml) should be
adapted.

The files extracted from the war file need to be readable for the UID in
which the tomcat is running. No files need to be written by the Tomcat.

==========================================================================================
	AAI (Shibboleth vs Lana2)
==========================================================================================
	
Out of the box, the Metadata Browser is configured to be used with Shibboleth
authentication. It is possible to configure the browser for use with Lana2:
	
INSTALLATION NOTES FOR LANA2 ENVIRONMENTS

Make sure to have a version of metadata-browser-pages that was built with the
'non-shib' Maven build profile. This should be indicated in the file name of the
deployment package. You can further verify this by checking that there is a
a JAR for ams2 version 1.4.9.* in 'WEB-inf/lib'.

After deployment, comment/uncomment the indicated sections in the web.xml file
to enable LANA2 authentication.

==========================================================================================
CONFIGURATION
==========================================================================================

The METADATA Browser uses the following configuration options:

* nl.mpi.metadatabrowser.manualUrl
(a website about usage of the metadata browser: This is no webapp and this
URL is not affected by forceHttpOrHttps nor forceHttpsPrefix settings!)

* nl.mpi.annexUrl
(location of Annex webapp, gets ?jsessionid=...&handle=... suffix or, if no
handle/pid/urid known, ?jsessionid=...&nodeid=... suffix from the browser)

* nl.mpi.trovaUrl
(location of Trova webapp, can be referenced as $trova_url$ in config file
popup-menu-items.xml Browser uses nodeid= but Trova also supports handle=)

* nl.mpi.rrsIndex
(location of "request access" page within RRS, see below)

* nl.mpi.rrsRegister
(location of "register as new user" page within RRS...)

* nl.mpi.amsUrl
(location of the Access Management System webapp, referenced as $AmsURL$)

* nl.mpi.amsRecalculateUrl
(URL to contact after running the ArchiveCrawler to let AMS know that
the access rights for the affected corpus have to be recalculated)

* nl.mpi.imexUrl
(location of the Imex image viewer webapp, can be referenced as $ImexURL$)

* nl.mpi.imdiSearchUrl
(location of the IMDI Metadata Search webapp, referenced as $IMDISearchURL$)

* nl.mpi.rrsUrl
(location of Resource Request System webapp, used together with nl.mpi.rrs*
and can be referenced as $RRSURL$ when used in popup-menu-items.xml)

* nl.mpi.translationservicebase
Base url for the translation service up to "/translate?...", 
e.g. "https://lux16.mpi.nl/ds/TranslationService"

* nl.mpi.metadatabrowser.schemeReplacePattern
URLs matching this regex will have their scheme rewritten

* nl.mpi.metadatabrowser.schemeReplaceTargetScheme
Protocol enforcement on matching URLs, e.g. http or https, will be applied to
external URLs matching the pattern defined in the schemeReplacePattern parameter

* nl.mpi.metadatabrowser.adapter.handleResolutionCacheExpiry
amount of time in seconds for which handle - URL resolutions should be cached

* nl.mpi.metadatabrowser.annexMimeTypes
OPTIONAL whitespace separated list of mime types that should open Annex when the 
'view' action is executed. Defaults to:
    "text/plain text/x-eaf+xml text/x-chat text/x-shoebox-text 
    text/x-toolbox-text text/x-subrip text/praat-textgrid"

* nl.mpi.metadatabrowser.optionalAnnexMimeTypes
OPTIONAL whitespace separated list of mime types for which the user should be
provided the option to open in Annex or using the browser's viewer. Defaults to:
    "text/plain text/xml application/xml"

* nl.mpi.metadatabrowser.wicket.maxSizePerSession 
OPTIONAL representation of the size for page store file (cache on disk per
session), e.g. '10M' or '1024K'

* nl.mpi.metadatabrowser.wicket.inmemoryCacheSize
OPTIONAL integer parameter defining the maximum number of page instances 
that will be saved into application-scoped cache (0 is disabled, also the
default)

* nl.mpi.metadatabrowser.customHomePageProperties 
OPTIONAL parameter specifying the location of a custom 'home page properties' 
file (see section on customisation below).

* nl.mpi.metadatabrowser.adapter.handleResolverUri
OPTIONAL parameter specifying the base URI of the handle resolver, assumed to
have a trailing slash, e.g. https://hdl.handle.net/

* nl.mpi.metadatabrowser.allowHandleDisplay
OPTIONAL parameter that determines whether the application should display 
handles for nodes in bookmarks etc regardless of whether they are available
(defaults to true)

Connection parameters for the 'adapter' profile (i.e. hybrid archive):

* nl.mpi.metadatabrowser.adapter.CSDBConnectionResource
Name of the JNDI resource to use to connect to the corpus structure database (in case
of the 'adapter' profile)

* nl.mpi.metadatabrowser.adapter.AMS2ConnectionResource
Name of the JNDI resource to use to connect to the AMS2 database 

* nl.mpi.metadatabrowser.adapter.DAMLRResource
Name of the JNDI resource to use to connect to DAMLR 

* nl.mpi.metadatabrowser.adapter.ADSResource
Name of the JNDI resource to use to connect to Active Directory 

* nl.mpi.metadatabrowser.adapter.amsConfProfile
Mode of AMS, either 'imdi' (for "normal" IMDI archive) or 'cmdi' (for hybrid/CMDI)

The metadata browser accepts the following URL GET parameters:

- rootnode
- openpath
- openhandle

Handles are supported in the form of handle URIs such as 
	'hdl:1234/abc-def'

Node IDs are supported in the form of node ID URIs such as 
	'node:5678'

In order to be backwards compatible and support cases such as
	'openpath=MPI84114%23'
define a rewrite rule (for the first two of these parameters) that rewrites this to
a node URI, e.g. in this case
	'openpath=node:84114'

================================================================================
CUSTOMISATION
================================================================================

A number of aspects of the metadata browser can be customised, such as the page
title, the name and icons shown in the header, and the welcome page that is
shown if no nodes are selected. Customisation is based on a number values set in
a properties file. By default, the application loads these values from the
following file in the web application:

	WEB-INF/classes/HomePage.properties

Customisation can be done either by modifying this file (which may cause the
modifications to get lost when the application is updated), or by making a copy
of this file and configuring the following context parameter to hold the
location of this copy:

	nl.mpi.metadatabrowser.customHomePageProperties

For example:

    	<Parameter name="nl.mpi.metadatabrowser.customHomePageProperties"
    	value="/lat/webapps/metadata-browser/tla_homepage.properties" />

Because of caching, the application needs to be reset for changes in the
properties file to take effect. Some documentation on the individual properties
can be found as comments in the properties file itself.

To customise the welcome page shown when the browser is opened without any
node selected, set the following property in your homepage properties file:

    welcomepage.url

to the location of that page, e.g. http://my-host.com/HomePage.html.
Note: since the URL will be resolved from the host itself, you can also use 
'localhost' as a hostname if applicable, e.g. http://localhost/HomePage.html.

You may use the file 'HomePage.html', which can be found in the web application
package, as an example or template.
