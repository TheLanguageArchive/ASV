/*
 * Copyright (C) 2014 Max Planck Institute for Psycholinguistics
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package nl.mpi.metadatabrowser.services.cmdi.impl;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import javax.xml.transform.Templates;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Factory for {@link Templates} that takes packaged resources as schema sources
 *
 * @author Twan Goosen <twan.goosen@mpi.nl>
 */
public class ResourceTemplateFactory {

    private final static Logger logger = LoggerFactory.getLogger(ResourceTemplateFactory.class);
    private final TransformerFactory transformerFactory = TransformerFactory.newInstance();

    /**
     *
     * @param resource name of the resource relative to this transformer class
     * @return the templates generated by this factory's
     * {@link TransformerFactory} on basis of the stream source referencing the
     * specified resource
     * @throws TransformerConfigurationException
     */
    public Templates newTemplate(String resource) throws TransformerConfigurationException {
        if (resource.toLowerCase().startsWith("http:") || resource.startsWith("https:") || resource.startsWith("file:")) {
            try {
                return newTemplate(new URL(resource));
            } catch (MalformedURLException ex) {
                throw new RuntimeException("Invalid URL for template: " + resource, ex);
            } catch (IOException ex) {
                throw new RuntimeException("Could not create template for URL: " + resource, ex);
            }
        } else {
            return newTemplate(getClass(), resource);
        }
    }

    /**
     *
     * @param clazz class to resolve resource on
     * @param resource name of the resource relative to the class
     * @return the templates generated by this factory's
     * {@link TransformerFactory} on basis of the stream source referencing the
     * specified resource
     * @throws TransformerConfigurationException
     */
    public Templates newTemplate(Class clazz, String resource) throws TransformerConfigurationException {
        // use resource URL instead of stream to allow for imports 
        // (which need to be resolved on basis of the SystemId by the transformer)
        final URL resourceURL = clazz.getResource(resource);

        logger.debug("Creating StreamSource for resource {} (context class: {})", resourceURL, clazz.getName());
        final StreamSource source = new StreamSource(resourceURL.toString());

        logger.info("Creating templates for stylesheet {}", resource);
        return transformerFactory.newTemplates(source);
    }

    public Templates newTemplate(URL url) throws IOException, TransformerConfigurationException {
        final InputStream stream = url.openStream();
        try {
            final StreamSource source;
            if (url.getProtocol().equalsIgnoreCase("file")) {
                source = new StreamSource(stream, URI.create(url.toString()).getSchemeSpecificPart());
            } else {
                source = new StreamSource(stream, url.toString());
            }
            return transformerFactory.newTemplates(source);
        } finally {
            stream.close();
        }
    }

}
