<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
       profile="cmdi-production,cmdi-production-providers">
    	

    <!-- 
	Spring configuration for usage of the CMDI metadata browser services in a production environment.
	
	    These beans should get picked up by the metadata browser wicket application as long as the 'cmdi-production' profile
	    or 'cmdi-production-providers' is active.
    -->

    <!-- Annotation configuration needs to be enabled for the autowiring to work -->
    <context:annotation-config />

    <!-- 'Local' services used by services required for Metadata Browser-->
    
    <!-- Profile identifier -->
    <bean id="profileIdentifier" class="nl.mpi.metadatabrowser.services.cmdi.impl.ProfileIdentifierImpl" />
    <!-- AMS2 license service. Todo: replace with non-mock -->
    <bean id="licSrv" class="nl.mpi.metadatabrowser.services.cmdi.mock.MockLicenseService"/>
    <!-- AMS2 authorisation service. Todo: replace with non-mock -->
    <bean id="authoSrv" class="nl.mpi.metadatabrowser.services.cmdi.mock.MockAuthorizationService" />
    
    <!-- Tree model provider based on corpus structure -->    
    <bean id="treeModelProvider" class="nl.mpi.archiving.tree.corpusstructure.CorpusStructureTreeModelProvider">
	<constructor-arg ref="csdbFactory" />
    </bean>    
    
    <!-- CMDI implementations for metadata browser providers -->
    <bean id="nodeTypeIdentifier" class="nl.mpi.metadatabrowser.services.cmdi.impl.CMDINodeTypeIdentifier" />

    <bean id="zipService" class="nl.mpi.metadatabrowser.services.cmdi.impl.ZipServiceImpl" />
    
    <bean id="nodePresentationProvider" class="nl.mpi.metadatabrowser.services.cmdi.impl.CMDINodePresentationProvider" />
    
    <bean id="treeIconProvider" class="nl.mpi.metadatabrowser.services.cmdi.impl.CMDINodeIconProvider" />

    <!-- Node actions provider. Todo: see if can be autowired -->
    <bean id="nodeActionsProvider" class="nl.mpi.metadatabrowser.services.cmdi.impl.CMDIActionsProvider">
	<constructor-arg ref="csdb" />
	<constructor-arg ref="nodeResolver" />
	<constructor-arg ref="zipService" />
    </bean>    
</beans>
